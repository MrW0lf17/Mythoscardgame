{"version":3,"file":"static/js/5.3abe91f7.chunk.js","mappings":"mKACO,M,6HCSP,MAAMA,EAAoB,IACpBC,EAAkB,IAElBC,EAAW,GAIjB,SAASC,EAAaC,GACpB,IAAK,IAAIC,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACzC,MAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,KACzCD,EAAMC,GAAID,EAAMG,IAAM,CAACH,EAAMG,GAAIH,EAAMC,GAC1C,CACA,OAAOD,CACT,CAEA,MAAMO,EAAmBC,IACvB,OAAkB,OAAXA,QAAW,IAAXA,OAAW,EAAXA,EAAaC,eAClB,IAAK,OAAQ,MAAO,eACpB,IAAK,QAAS,MAAO,gBACrB,IAAK,MAAO,MAAO,cACnB,IAAK,QAAS,MAAO,gBACrB,IAAK,QAAS,MAAO,gBAErB,QAAS,MAAO,eAClB,EAIIC,EAAqBA,CAACC,EAAQC,EAAGC,KACrC,MAAMC,EAAUC,SAASC,cAAc,OACvCF,EAAQG,UAAY,gBACpBH,EAAQI,YAAc,IAAIP,IAC1BG,EAAQK,MAAMC,KAAO,GAAGR,MACxBE,EAAQK,MAAME,IAAM,GAAGR,MACvBE,SAASO,KAAKC,YAAYT,GAG1BU,YAAW,IAAMV,EAAQW,UAAU,IAAK,EAqY1C,QAlYA,SAAmBC,GAA2B,IAA1B,KAAEC,EAAI,cAAEC,GAAeF,EACzC,MAAMG,GAAaC,EAAAA,EAAAA,KAAYC,GAASA,EAAMC,OAAOC,QAC9CC,EAAYC,IAAiBC,EAAAA,EAAAA,UAAS,KACtCC,EAAaC,IAAkBF,EAAAA,EAAAA,UAAS,KACxCG,EAAUC,IAAeJ,EAAAA,EAAAA,UAAS,KAClCK,EAAUC,IAAeN,EAAAA,EAAAA,UAAS,KAClCO,EAAWC,IAAgBR,EAAAA,EAAAA,UAAS,KACpCS,EAAOC,IAAYV,EAAAA,EAAAA,UAAS,iBAC5BW,EAAOC,IAAYZ,EAAAA,EAAAA,UAAS,IAE5Ba,EAAaC,IAAkBd,EAAAA,EAAAA,UAAS,CAC7Ce,GAAIvD,EACJwD,KAlDiB,GAmDjBC,eAAgB,OAChBC,MAAO,QAGFC,EAAWC,IAAgBpB,EAAAA,EAAAA,UAAS,CACzCe,GAAItD,EACJuD,KAzDiB,GA0DjBC,eAAgB,OAChBC,MAAO,QAGFG,EAAiBC,IAAsBtB,EAAAA,EAAAA,UA3Df,IA6D/BuB,EAAAA,EAAAA,YAAU,KACR,GAAI9B,EAAW3B,OAAS,EAAG,CACzB,MAAM0D,EAAqB7D,EAAa,IAAI8B,IAC5CM,EAAcyB,EAAmBC,MAAM,EAjE3B,GAkEd,CAEA,MAAM5B,GAAO6B,EAAAA,EAAAA,IAAQnC,EAAKoC,MAC1B,GAAI9B,EAAM,CACR,MAAM+B,EAAmBjE,EAAa,IAAIkC,IAC1CO,EAAYwB,GACZtB,EAAYsB,EAAiBH,MAAM,EAxEvB,GAyEd,IACC,CAAChC,EAAYF,EAAKoC,OAErB,MAAME,EAAmBA,CAACC,EAAMC,KAC1BA,EACElB,EAAYG,MAAQc,EAAKE,WAC3B9B,GAAe+B,GAAQ,IAAIA,EAAMH,KACjC/B,GAAckC,GAAQA,EAAKC,QAAOC,GAAKA,EAAEC,KAAON,EAAKM,OACrDtB,GAAemB,IAAI,IACdA,EACHjB,KAAMiB,EAAKjB,KAAOc,EAAKE,cAIvBb,EAAUH,MAAQc,EAAKE,WACzBxB,GAAayB,GAAQ,IAAIA,EAAMH,KAC/BxB,GAAY2B,GAAQA,EAAKC,QAAOC,GAAKA,EAAEC,KAAON,EAAKM,OACnDhB,GAAaa,IAAI,IACZA,EACHjB,KAAMiB,EAAKjB,KAAOc,EAAKE,aAG7B,EAoIIK,EAAqBA,KACzB,GAAIxB,EAAYE,IAAM,GAAKI,EAAUJ,IAAM,EAAG,CAE5C,MAAMuB,EAASzB,EAAYE,GAAK,EAAI,SAAW,OAC/CwB,MAAM,GAAGD,UAEX,MAEE1B,GAASqB,GAAQA,EAAO,IACxBvB,EAAS,gBACTI,GAAemB,IAAI,IACdA,EACHjB,KAAMhD,KAAKwE,IAAIP,EAAKjB,KAAO,EAAGtD,OAEhC0D,GAAaa,IAAI,IACZA,EACHjB,KAAMhD,KAAKwE,IAAIP,EAAKjB,KAAO,EAAGtD,OAGhCqC,EAAcN,EAAWgC,MAAM,EAtPnB,IAuPZnB,EAAYH,EAASsB,MAAM,EAvPf,IA0PZH,GAAmBW,GAAQjE,KAAKyE,IAAI,EAAGR,EAAO,IAChD,EAaF,OACES,EAAAA,EAAAA,MAAA,OAAK7D,UAAW,eAAeV,EAAgBoB,EAAKb,WAAWiE,SAAA,EAC7DD,EAAAA,EAAAA,MAAA,OAAK7D,UAAU,YAAW8D,SAAA,EACxBD,EAAAA,EAAAA,MAAA,OAAK7D,UAAU,eAAc8D,SAAA,CAAC,SAAOhC,MACzB,iBAAVF,GAAsC,eAAVA,KAC5BmC,EAAAA,EAAAA,KAAA,UACE/D,UAAU,kBACVgE,QAAmB,iBAAVpC,EAxDGqC,KACpBpC,EAAS,aAAa,EAGJqC,KAClBrC,EAAS,aA1HcsC,MACvB,IAAIC,EAAe,EACfC,EAAa,EAGjB,MAAMC,EAAmB5C,EAAU6C,KAAIC,IAAW,IAAUA,MACzDC,MAAK,CAACC,EAAGC,IAAMD,EAAEE,aAAeD,EAAEC,eAErCxD,EAAYyD,SAAQ5B,IAClB,GAAkB,WAAdA,EAAK6B,KAAmB,CAE1B,MAAMC,EAAcjF,SAASkF,cAAc,kBAAkB/B,EAAKM,QAClE,GAAIwB,EAAa,CACfA,EAAYE,UAAUC,IAAI,qBAG1B,MAAMC,EAAOJ,EAAYK,wBACzB7E,YAAW,KACTd,EAAmBwD,EAAKoC,YAAaF,EAAKG,MAAOH,EAAK/E,IAAI,GACzD,IACL,CAEA,IAAImF,EAAuBtC,EAAKoC,YAChC,IAAK,IAAIrG,EAAI,EAAGA,EAAIsF,EAAiBrF,QAAUsG,EAAuB,EAAGvG,IAAK,CAC5E,MAAMwF,EAAcF,EAAiBtF,GACrC,GAAyB,YAArBwF,EAAYM,KAAoB,CAClC,MAAMU,EAAiB1F,SAASkF,cAAc,kBAAkBR,EAAYjB,QACxEiC,GACFA,EAAeP,UAAUC,IAAI,uBAG/B,MAAMO,EAAQtG,KAAKwE,IAAI4B,EAAsBf,EAAYI,cACzDW,GAAwBE,EACxBjB,EAAYI,cAAgBa,CAC9B,CACF,CACArB,GAAgBmB,CAClB,KAIF,MAAMG,EAAqBtE,EAAYmD,KAAIC,IAAW,IAAUA,MAC7DC,MAAK,CAACC,EAAGC,IAAMD,EAAEE,aAAeD,EAAEC,eAiCrC,GA/BAlD,EAAUmD,SAAQ5B,IAChB,GAAkB,WAAdA,EAAK6B,KAAmB,CAC1B,MAAMC,EAAcjF,SAASkF,cAAc,kBAAkB/B,EAAKM,QAClE,GAAIwB,EAAa,CACfA,EAAYE,UAAUC,IAAI,oBAE1B,MAAMC,EAAOJ,EAAYK,wBACzB7E,YAAW,KACTd,EAAmBwD,EAAKoC,YAAaF,EAAKhF,KAAMgF,EAAK/E,IAAI,GACxD,IACL,CAEA,IAAImF,EAAuBtC,EAAKoC,YAChC,IAAK,IAAIrG,EAAI,EAAGA,EAAI0G,EAAmBzG,QAAUsG,EAAuB,EAAGvG,IAAK,CAC9E,MAAMwF,EAAckB,EAAmB1G,GACvC,GAAyB,YAArBwF,EAAYM,KAAoB,CAClC,MAAMU,EAAiB1F,SAASkF,cAAc,kBAAkBR,EAAYjB,QACxEiC,GACFA,EAAeP,UAAUC,IAAI,uBAG/B,MAAMO,EAAQtG,KAAKwE,IAAI4B,EAAsBf,EAAYI,cACzDW,GAAwBE,EACxBjB,EAAYI,cAAgBa,CAC9B,CACF,CACApB,GAAckB,CAChB,KAIEnB,EAAe,EAAG,CACpB,MAAMuB,EAAmB7F,SAASkF,cAAc,eAChC,OAAhBW,QAAgB,IAAhBA,GAAAA,EAAkBV,UAAUC,IAAI,sBAChC3E,YAAW,IAAsB,OAAhBoF,QAAgB,IAAhBA,OAAgB,EAAhBA,EAAkBV,UAAUzE,OAAO,uBAAuB,IAC7E,CAEA,GAAI6D,EAAa,EAAG,CAClB,MAAMuB,EAAqB9F,SAASkF,cAAc,iBAChC,OAAlBY,QAAkB,IAAlBA,GAAAA,EAAoBX,UAAUC,IAAI,sBAClC3E,YAAW,IAAwB,OAAlBqF,QAAkB,IAAlBA,OAAkB,EAAlBA,EAAoBX,UAAUzE,OAAO,uBAAuB,IAC/E,CAGAD,YAAW,KACT0B,GAAemB,IAAI,IACdA,EACHlB,GAAI/C,KAAKyE,IAAI,EAAGR,EAAKlB,GAAKmC,OAG5B9B,GAAaa,IAAI,IACZA,EACHlB,GAAI/C,KAAKyE,IAAI,EAAGR,EAAKlB,GAAKkC,OAI5BtE,SAAS+F,iBAAiB,yCACvBhB,SAAQhF,GAAWA,EAAQW,UAAS,GACtC,KAGHa,EAAeqE,EAAmBrC,QAAOJ,GAAQA,EAAK2B,aAAe,KACrEjD,EAAa2C,EAAiBjB,QAAOJ,GAAQA,EAAK2B,aAAe,IAAG,EAiBpET,GACA5D,YAAW,KACTiD,GAAoB,GACnB,IAAI,EA+CiEM,SACjE,iBAKLD,EAAAA,EAAAA,MAAA,OAAK7D,UAAU,eAAc8D,SAAA,EAC3BD,EAAAA,EAAAA,MAAA,OAAK7D,UAAU,cAAa8D,SAAA,EAC1BC,EAAAA,EAAAA,KAAA,MAAAD,SAAKpD,EAAKoC,QACVe,EAAAA,EAAAA,MAAA,OAAK7D,UAAU,SAAS,aAAW,KAAI8D,SAAA,EACrCC,EAAAA,EAAAA,KAAA,OACE/D,UAAW,YAAWsC,EAAUJ,GAAKtD,GAAwB,SAAW,IACxEsB,MAAO,CAAE4F,MAAWxD,EAAUJ,GAAKtD,EAAmB,IAAtC,QAElBiF,EAAAA,EAAAA,MAAA,QAAAC,SAAA,CAAOxB,EAAUJ,GAAG,IAAEtD,SAExBiF,EAAAA,EAAAA,MAAA,OAAK7D,UAAU,WAAW,aAAW,KAAI8D,SAAA,EACvCC,EAAAA,EAAAA,KAAA,OACE/D,UAAU,YACVE,MAAO,CAAE4F,MAAWxD,EAAUH,KAAOtD,EAAY,IAAjC,QAElBgF,EAAAA,EAAAA,MAAA,QAAAC,SAAA,CAAOxB,EAAUH,KAAK,IAAEtD,YAG5BgF,EAAAA,EAAAA,MAAA,OAAK7D,UAAU,gBAAe8D,SAAA,EAC5BC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,YACJD,EAAAA,EAAAA,MAAA,OAAK7D,UAAU,SAAS,aAAW,KAAI8D,SAAA,EACrCC,EAAAA,EAAAA,KAAA,OACE/D,UAAW,YAAWgC,EAAYE,GAAKvD,GAA0B,SAAW,IAC5EuB,MAAO,CAAE4F,MAAW9D,EAAYE,GAAKvD,EAAqB,IAA1C,QAElBkF,EAAAA,EAAAA,MAAA,QAAAC,SAAA,CAAO9B,EAAYE,GAAG,IAAEvD,SAE1BkF,EAAAA,EAAAA,MAAA,OAAK7D,UAAU,WAAW,aAAW,KAAI8D,SAAA,EACvCC,EAAAA,EAAAA,KAAA,OACE/D,UAAU,YACVE,MAAO,CAAE4F,MAAW9D,EAAYG,KAAOtD,EAAY,IAAnC,QAElBgF,EAAAA,EAAAA,MAAA,QAAAC,SAAA,CAAO9B,EAAYG,KAAK,IAAEtD,eAIhCgF,EAAAA,EAAAA,MAAA,OAAK7D,UAAU,YAAW8D,SAAA,EACxBD,EAAAA,EAAAA,MAAA,OAAK7D,UAAU,aAAY8D,SAAA,EACzBD,EAAAA,EAAAA,MAAA,OAAK7D,UAAW,qCAAqC8D,SAAA,EACnDC,EAAAA,EAAAA,KAAA,OAAKgC,IAAKC,EAAcC,IAAI,WAAWjG,UAAU,oBACjD+D,EAAAA,EAAAA,KAAA,OAAK/D,UAAW,6BAA6BsC,EAAUF,iBAAiB0B,SACrExB,EAAUD,QACT0B,EAAAA,EAAAA,KAAA,OAAK/D,UAAU,4BAA2B8D,SACvCxB,EAAUD,cAKnB0B,EAAAA,EAAAA,KAAA,OAAK/D,UAAU,kBAAiB8D,UAC9BC,EAAAA,EAAAA,KAAA,OACE/D,UAAU,mBACVE,MAAO,CAAEgG,OAAY5D,EAAUJ,GAAKtD,EAAmB,IAAtC,UAGrBmF,EAAAA,EAAAA,KAAA,OAAK/D,UAAU,cAAa8D,SACzBpC,EAAU6C,KAAItB,IACbc,EAAAA,EAAAA,KAAA,OAAmB/D,UAAU,iBAAgB8D,UAC3CC,EAAAA,EAAAA,KAACoC,EAAAA,EAAI,CAAClD,KAAMA,KADJA,EAAKM,SAKnBM,EAAAA,EAAAA,MAAA,OAAK7D,UAAU,iBAAgB8D,SAAA,EAC7BC,EAAAA,EAAAA,KAAA,OACE/D,UAAU,kBACVE,MAAO,CAAE4F,MAAWxD,EAAUH,KAAOtD,EAAY,IAAjC,QAElBgF,EAAAA,EAAAA,MAAA,QAAM7D,UAAU,kBAAiB8D,SAAA,CAAExB,EAAUH,KAAK,IAAEtD,MACpDkF,EAAAA,EAAAA,KAAA,OAAK/D,UAAU,cAAa8D,SAAExB,EAAUH,cAI5C0B,EAAAA,EAAAA,MAAA,OAAK7D,UAAU,eAAc8D,SAAA,EAC3BD,EAAAA,EAAAA,MAAA,OAAK7D,UAAW,uCAAuC8D,SAAA,EACrDC,EAAAA,EAAAA,KAAA,OAAKgC,IAAKK,EAAaH,IAAI,SAASjG,UAAU,oBAC9C+D,EAAAA,EAAAA,KAAA,OAAK/D,UAAW,6BAA6BgC,EAAYI,iBAAiB0B,SACvE9B,EAAYK,QACX0B,EAAAA,EAAAA,KAAA,OAAK/D,UAAU,4BAA2B8D,SACvC9B,EAAYK,cAKrB0B,EAAAA,EAAAA,KAAA,OAAK/D,UAAU,kBAAiB8D,UAC9BC,EAAAA,EAAAA,KAAA,OACE/D,UAAU,mBACVE,MAAO,CAAEgG,OAAYlE,EAAYE,GAAKvD,EAAqB,IAA1C,UAGrBoF,EAAAA,EAAAA,KAAA,OAAK/D,UAAU,cAAa8D,SACzB1C,EAAYmD,KAAItB,IACfc,EAAAA,EAAAA,KAAA,OAAmB/D,UAAU,iBAAgB8D,UAC3CC,EAAAA,EAAAA,KAACoC,EAAAA,EAAI,CAAClD,KAAMA,KADJA,EAAKM,SAKnBM,EAAAA,EAAAA,MAAA,OAAK7D,UAAU,iBAAgB8D,SAAA,EAC7BC,EAAAA,EAAAA,KAAA,OACE/D,UAAU,kBACVE,MAAO,CAAE4F,MAAW9D,EAAYG,KAAOtD,EAAY,IAAnC,QAElBgF,EAAAA,EAAAA,MAAA,QAAM7D,UAAU,kBAAiB8D,SAAA,CAAE9B,EAAYG,KAAK,IAAEtD,MACtDkF,EAAAA,EAAAA,KAAA,OAAK/D,UAAU,cAAa8D,SAAE9B,EAAYG,iBAIhD4B,EAAAA,EAAAA,KAAA,OAAK/D,UAAU,kBAAiB8D,UAC9BC,EAAAA,EAAAA,KAAA,UACE/D,UAAU,iBACVgE,QAlLwBqC,KAC9B,GAAwB,IAApB7D,EAAuB,CACzB,MAAM8D,ECnGkB,SAACC,EAASvE,GAAiD,IAApCf,EAAUuF,UAAAvH,OAAA,QAAAwH,IAAAD,UAAA,GAAAA,UAAA,GAAG,GAAIhF,EAAQgF,UAAAvH,OAAA,QAAAwH,IAAAD,UAAA,GAAAA,UAAA,GAAG,GAC/E,OAAQD,EAAQzD,MACd,IAAK,kBACH,GAAuB,IAAnBd,EAAYE,GACd,MAAO,IACFF,EACHE,GAAI/C,KAAKC,MAA0B,GAApB4C,EAAY0E,OAC3BC,iBAAkB,KAGtB,MAEF,IAAK,cACH,MAAMC,EAAazH,KAAKE,SAAW,GAAM,EAAI,EAC7C,MAAO,IACF2C,EACH6E,eAAgBD,GAGpB,IAAK,aACH,MAAO,IACF5E,EACH8E,OAAQ,GAGZ,IAAK,cACH,GAAI7F,EAAWhC,OAAS,EAAG,CACzB,MAAM8H,EAAc5H,KAAKC,MAAMD,KAAKE,SAAW4B,EAAWhC,QACpD+H,EAAc,IAAI/F,GAKxB,OAJA+F,EAAYD,GAAe,IACtBC,EAAYD,GACf5D,SAAUhE,KAAKyE,IAAI,EAAGoD,EAAYD,GAAa5D,SAAW,IAErD,CAAE8D,KAAMD,EACjB,CACA,MAEF,IAAK,oBACH,GAAI/F,EAAWhC,OAAS,EAAG,CACzB,MAAMiI,EAAajG,EAAW9B,KAAKC,MAAMD,KAAKE,SAAW4B,EAAWhC,SAC9DkI,EAAgB,IACjBD,EACH3D,GAAI,GAAG2D,EAAW3D,gBAAgB6D,KAAKC,QACvCC,cAAc,GAEhB,MAAO,CACLL,KAAM,IAAIhG,EAAYkG,GAE1B,CACA,MAEF,IAAK,eACH,GAAI3F,EAASvC,OAAS,EAAG,CACvB,MAAMsI,EAAa/F,EAASrC,KAAKC,MAAMD,KAAKE,SAAWmC,EAASvC,SAC1DuI,EAAa,IACdD,EACHhE,GAAI,GAAGgE,EAAWhE,aAAa6D,KAAKC,QACpCI,UAAU,GAEZ,MAAO,CACLR,KAAM,IAAIhG,EAAYuG,GAE1B,CACA,MAEF,IAAK,oBACH,MAAO,IACFxF,EACHE,GAAI/C,KAAKwE,IAAI3B,EAAY0E,MAAO1E,EAAYE,GAAK/C,KAAKC,MAA0B,GAApB4C,EAAY0E,QACxEgB,kBAAmB,GAGvB,QACE,OAAO1F,EAEb,CDwB2B2F,CAAehH,EAAeqB,EAAaf,EAAYO,GAC5ES,GAAemB,IAAI,IAAUA,KAASkD,MACtC7D,EAAmB9B,EAAciH,SACnC,GA8KMC,SAAUrF,EAAkB,EAC5B,gBAAeA,EAAgBsB,SAE9BtB,EAAkB,EAAI,GAAK,QAGrB,iBAAVZ,IACCmC,EAAAA,EAAAA,KAAA,OAAK/D,UAAU,cAAa8D,SACzB7C,EAAWsD,KAAItB,IACdc,EAAAA,EAAAA,KAAA,OAEE/D,UAAW,mBAAkBgC,EAAYG,KAAOc,EAAKE,SAAW,WAAa,IAC7Ea,QAASA,IAAMhB,EAAiBC,GAAM,GAAMa,UAE5CC,EAAAA,EAAAA,KAACoC,EAAAA,EAAI,CAAClD,KAAMA,KAJPA,EAAKM,QASP,eAAV3B,IACCmC,EAAAA,EAAAA,KAAA,OAAK/D,UAAU,YAAW8D,SACvBtC,EAAS+C,KAAItB,IACZc,EAAAA,EAAAA,KAAA,OAEE/D,UAAW,mBAAkBsC,EAAUH,KAAOc,EAAKE,SAAW,WAAa,IAC3Ea,QAASA,IAAMhB,EAAiBC,GAAM,GAAOa,UAE7CC,EAAAA,EAAAA,KAACoC,EAAAA,EAAI,CAAClD,KAAMA,KAJPA,EAAKM,UAWxB,C","sources":["data/elements.js","components/BossBattles.js","data/abilities.js"],"sourcesContent":["// Define elemental relationships and mechanics\nexport const ELEMENTAL_ADVANTAGES = {\n    Fire: 'Air',\n    Air: 'Earth',\n    Earth: 'Water',\n    Water: 'Fire',\n    Spirit: 'Darkness',\n    Darkness: 'Life',\n    Life: 'Spirit'\n};\n\nexport const calculateElementalMultiplier = (attackerElement, defenderElement) => {\n    if (ELEMENTAL_ADVANTAGES[attackerElement] === defenderElement) {\n        return 1.2; // 20% more damage\n    } else if (ELEMENTAL_ADVANTAGES[defenderElement] === attackerElement) {\n        return 0.8; // 20% less damage\n    }\n    return 1.0; // Normal damage\n};\n","import React, { useState, useEffect, useCallback } from 'react';\nimport './BossBattles.css';\nimport Card from './Card';\nimport { useSelector } from 'react-redux';\nimport { getDeck } from '../data/decks';\nimport { calculateElementalMultiplier } from '../data/elements';\nimport { executeAbility } from '../data/abilities'; // Import ability execution logic\nimport fireImpImage from '../images/characters/npc/fireimp.png';\nimport playerImage from '../images/characters/player/player_idle.png';\n\nconst INITIAL_PLAYER_HP = 100;\nconst INITIAL_BOSS_HP = 100;\nconst INITIAL_MANA = 10;\nconst MAX_MANA = 10;\nconst HAND_SIZE = 4;\nconst INITIAL_ABILITY_COOLDOWN = 3; // Initial cooldown for abilities\n\nfunction shuffleArray(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]]; // Swap elements\n  }\n  return array;\n}\n\nconst getElementClass = (bossElement) => {\n  switch(bossElement?.toLowerCase()) {\n    case 'fire': return 'fire-element';\n    case 'water': return 'water-element';\n    case 'air': return 'air-element';\n    case 'earth': return 'earth-element';\n    case 'light': return 'light-element';\n    case 'dark': return 'dark-element';\n    default: return 'dark-element';\n  }\n};\n\n// Add this helper function at the top level\nconst createDamageNumber = (damage, x, y) => {\n  const element = document.createElement('div');\n  element.className = 'damage-number';\n  element.textContent = `-${damage}`;\n  element.style.left = `${x}px`;\n  element.style.top = `${y}px`;\n  document.body.appendChild(element);\n  \n  // Remove the element after animation\n  setTimeout(() => element.remove(), 1000);\n};\n\nfunction BossBattle({ boss, playerAbility }) {\n  const playerDeck = useSelector(state => state.player.deck);\n  const [playerHand, setPlayerHand] = useState([]);\n  const [playerField, setPlayerField] = useState([]);\n  const [bossDeck, setBossDeck] = useState([]);\n  const [bossHand, setBossHand] = useState([]);\n  const [bossField, setBossField] = useState([]);\n  const [phase, setPhase] = useState('playerSelect');\n  const [round, setRound] = useState(1);\n\n  const [playerState, setPlayerState] = useState({\n    hp: INITIAL_PLAYER_HP,\n    mana: INITIAL_MANA,\n    characterState: 'idle',\n    emote: null\n  });\n\n  const [bossState, setBossState] = useState({\n    hp: INITIAL_BOSS_HP,\n    mana: INITIAL_MANA,\n    characterState: 'idle',\n    emote: null\n  });\n\n  const [abilityCooldown, setAbilityCooldown] = useState(INITIAL_ABILITY_COOLDOWN);\n\n  useEffect(() => {\n    if (playerDeck.length > 0) {\n      const shuffledPlayerDeck = shuffleArray([...playerDeck]);\n      setPlayerHand(shuffledPlayerDeck.slice(0, HAND_SIZE));\n    }\n\n    const deck = getDeck(boss.name);\n    if (deck) {\n      const shuffledBossDeck = shuffleArray([...deck]);\n      setBossDeck(shuffledBossDeck);\n      setBossHand(shuffledBossDeck.slice(0, HAND_SIZE));\n    }\n  }, [playerDeck, boss.name]);\n\n  const handleCardSelect = (card, isPlayer) => {\n    if (isPlayer) {\n      if (playerState.mana >= card.manaCost) {\n        setPlayerField(prev => [...prev, card]);\n        setPlayerHand(prev => prev.filter(c => c.id !== card.id));\n        setPlayerState(prev => ({\n          ...prev,\n          mana: prev.mana - card.manaCost,\n        }));\n      }\n    } else {\n      if (bossState.mana >= card.manaCost) {\n        setBossField(prev => [...prev, card]);\n        setBossHand(prev => prev.filter(c => c.id !== card.id));\n        setBossState(prev => ({\n          ...prev,\n          mana: prev.mana - card.manaCost,\n        }));\n      }\n    }\n  };\n\n  const calculateResults = () => {\n    let playerDamage = 0;\n    let bossDamage = 0;\n\n    // Calculate player damage to boss\n    const updatedBossField = bossField.map(defenseCard => ({ ...defenseCard }))\n      .sort((a, b) => a.defensePower - b.defensePower);\n\n    playerField.forEach(card => {\n      if (card.type === 'Attack') {\n        // Add attack animation\n        const cardElement = document.querySelector(`[data-card-id=\"${card.id}\"]`);\n        if (cardElement) {\n          cardElement.classList.add('card-attack-right');\n          \n          // Get card position for damage number\n          const rect = cardElement.getBoundingClientRect();\n          setTimeout(() => {\n            createDamageNumber(card.attackPower, rect.right, rect.top);\n          }, 500);\n        }\n\n        let remainingAttackPower = card.attackPower;\n        for (let i = 0; i < updatedBossField.length && remainingAttackPower > 0; i++) {\n          const defenseCard = updatedBossField[i];\n          if (defenseCard.type === 'Defense') {\n            const defenseElement = document.querySelector(`[data-card-id=\"${defenseCard.id}\"]`);\n            if (defenseElement) {\n              defenseElement.classList.add('card-defense-impact');\n            }\n            \n            const block = Math.min(remainingAttackPower, defenseCard.defensePower);\n            remainingAttackPower -= block;\n            defenseCard.defensePower -= block;\n          }\n        }\n        playerDamage += remainingAttackPower;\n      }\n    });\n\n    // Calculate boss damage to player (similar logic for boss attacks)\n    const updatedPlayerField = playerField.map(defenseCard => ({ ...defenseCard }))\n      .sort((a, b) => a.defensePower - b.defensePower);\n\n    bossField.forEach(card => {\n      if (card.type === 'Attack') {\n        const cardElement = document.querySelector(`[data-card-id=\"${card.id}\"]`);\n        if (cardElement) {\n          cardElement.classList.add('card-attack-left');\n          \n          const rect = cardElement.getBoundingClientRect();\n          setTimeout(() => {\n            createDamageNumber(card.attackPower, rect.left, rect.top);\n          }, 500);\n        }\n\n        let remainingAttackPower = card.attackPower;\n        for (let i = 0; i < updatedPlayerField.length && remainingAttackPower > 0; i++) {\n          const defenseCard = updatedPlayerField[i];\n          if (defenseCard.type === 'Defense') {\n            const defenseElement = document.querySelector(`[data-card-id=\"${defenseCard.id}\"]`);\n            if (defenseElement) {\n              defenseElement.classList.add('card-defense-impact');\n            }\n            \n            const block = Math.min(remainingAttackPower, defenseCard.defensePower);\n            remainingAttackPower -= block;\n            defenseCard.defensePower -= block;\n          }\n        }\n        bossDamage += remainingAttackPower;\n      }\n    });\n\n    // Add damage flash effect to fields\n    if (playerDamage > 0) {\n      const bossFieldElement = document.querySelector('.boss-field');\n      bossFieldElement?.classList.add('field-damage-flash');\n      setTimeout(() => bossFieldElement?.classList.remove('field-damage-flash'), 500);\n    }\n\n    if (bossDamage > 0) {\n      const playerFieldElement = document.querySelector('.player-field');\n      playerFieldElement?.classList.add('field-damage-flash');\n      setTimeout(() => playerFieldElement?.classList.remove('field-damage-flash'), 500);\n    }\n\n    // Update the HP after animations\n    setTimeout(() => {\n      setPlayerState(prev => ({\n        ...prev,\n        hp: Math.max(0, prev.hp - bossDamage),\n      }));\n\n      setBossState(prev => ({\n        ...prev,\n        hp: Math.max(0, prev.hp - playerDamage),\n      }));\n\n      // Clean up animations\n      document.querySelectorAll('.card-attack-right, .card-attack-left')\n        .forEach(element => element.remove());\n    }, 1000);\n\n    // Filter out used defense cards\n    setPlayerField(updatedPlayerField.filter(card => card.defensePower > 0));\n    setBossField(updatedBossField.filter(card => card.defensePower > 0));\n  };\n\n  const handleAbilityActivation = () => {\n    if (abilityCooldown === 0) {\n      const updatedState = executeAbility(playerAbility, playerState, playerHand, bossHand);\n      setPlayerState(prev => ({ ...prev, ...updatedState }));\n      setAbilityCooldown(playerAbility.cooldown);\n    }\n  };\n\n  const endPlayerTurn = () => {\n    setPhase('bossSelect');\n  };\n\n  const endBossTurn = () => {\n    setPhase('calculate');\n    calculateResults();\n    setTimeout(() => {\n      checkForEndOfRound();\n    }, 500); // Delay to allow for animations or updates\n  };\n\n  const checkForEndOfRound = () => {\n    if (playerState.hp <= 0 || bossState.hp <= 0) {\n      // End the game\n      const winner = playerState.hp > 0 ? 'Player' : 'Boss';\n      alert(`${winner} wins!`);\n      // Optionally reset the game or navigate away\n    } else {\n      // Start a new round\n      setRound(prev => prev + 1);\n      setPhase('playerSelect');\n      setPlayerState(prev => ({\n        ...prev,\n        mana: Math.min(prev.mana + 1, MAX_MANA), // Increment mana\n      }));\n      setBossState(prev => ({\n        ...prev,\n        mana: Math.min(prev.mana + 1, MAX_MANA), // Increment mana\n      }));\n      // Refill hands if needed\n      setPlayerHand(playerDeck.slice(0, HAND_SIZE));\n      setBossHand(bossDeck.slice(0, HAND_SIZE));\n\n      // Decrease ability cooldown\n      setAbilityCooldown(prev => Math.max(0, prev - 1));\n    }\n  };\n\n  const showEmote = (character, emoteText) => {\n    if (character === 'boss') {\n      setBossState(prev => ({ ...prev, emote: emoteText }));\n      setTimeout(() => setBossState(prev => ({ ...prev, emote: null })), 2000);\n    } else {\n      setPlayerState(prev => ({ ...prev, emote: emoteText }));\n      setTimeout(() => setPlayerState(prev => ({ ...prev, emote: null })), 2000);\n    }\n  };\n\n  return (\n    <div className={`boss-battle ${getElementClass(boss.element)}`}>\n      <div className=\"round-box\">\n        <div className=\"round-number\">Round {round}</div>\n        {(phase === 'playerSelect' || phase === 'bossSelect') && (\n          <button \n            className=\"end-turn-button\" \n            onClick={phase === 'playerSelect' ? endPlayerTurn : endBossTurn}\n          >\n            End Turn\n          </button>\n        )}\n      </div>\n      <div className=\"status-panel\">\n        <div className=\"boss-status\">\n          <h3>{boss.name}</h3>\n          <div className=\"hp-bar\" data-label=\"HP\">\n            <div \n              className={`hp-fill ${bossState.hp < INITIAL_BOSS_HP * 0.3 ? 'low-hp' : ''}`}\n              style={{ width: `${(bossState.hp / INITIAL_BOSS_HP) * 100}%` }}\n            ></div>\n            <span>{bossState.hp}/{INITIAL_BOSS_HP}</span>\n          </div>\n          <div className=\"mana-bar\" data-label=\"MP\">\n            <div \n              className=\"mana-fill\"\n              style={{ width: `${(bossState.mana / MAX_MANA) * 100}%` }}\n            ></div>\n            <span>{bossState.mana}/{MAX_MANA}</span>\n          </div>\n        </div>\n        <div className=\"player-status\">\n          <h3>Player</h3>\n          <div className=\"hp-bar\" data-label=\"HP\">\n            <div \n              className={`hp-fill ${playerState.hp < INITIAL_PLAYER_HP * 0.3 ? 'low-hp' : ''}`}\n              style={{ width: `${(playerState.hp / INITIAL_PLAYER_HP) * 100}%` }}\n            ></div>\n            <span>{playerState.hp}/{INITIAL_PLAYER_HP}</span>\n          </div>\n          <div className=\"mana-bar\" data-label=\"MP\">\n            <div \n              className=\"mana-fill\"\n              style={{ width: `${(playerState.mana / MAX_MANA) * 100}%` }}\n            ></div>\n            <span>{playerState.mana}/{MAX_MANA}</span>\n          </div>\n        </div>\n      </div>\n      <div className=\"game-area\">\n        <div className=\"boss-field\">\n          <div className={`character-container boss-character`}>\n            <img src={fireImpImage} alt=\"Fire Imp\" className=\"idle-animation\" />\n            <div className={`character-state character-${bossState.characterState}`}>\n              {bossState.emote && (\n                <div className=\"emote-bubble emote-active\">\n                  {bossState.emote}\n                </div>\n              )}\n            </div>\n          </div>\n          <div className=\"vertical-hp-bar\">\n            <div \n              className=\"vertical-hp-fill\"\n              style={{ height: `${(bossState.hp / INITIAL_BOSS_HP) * 100}%` }}\n            ></div>\n          </div>\n          <div className=\"field-cards\">\n            {bossField.map(card => (\n              <div key={card.id} className=\"card-container\">\n                <Card card={card} />\n              </div>\n            ))}\n          </div>\n          <div className=\"field-mana-bar\">\n            <div \n              className=\"field-mana-fill\"\n              style={{ width: `${(bossState.mana / MAX_MANA) * 100}%` }}\n            ></div>\n            <span className=\"field-mana-text\">{bossState.mana}/{MAX_MANA}</span>\n            <div className=\"mana-number\">{bossState.mana}</div>\n          </div>\n        </div>\n\n        <div className=\"player-field\">\n          <div className={`character-container player-character`}>\n            <img src={playerImage} alt=\"Player\" className=\"idle-animation\" />\n            <div className={`character-state character-${playerState.characterState}`}>\n              {playerState.emote && (\n                <div className=\"emote-bubble emote-active\">\n                  {playerState.emote}\n                </div>\n              )}\n            </div>\n          </div>\n          <div className=\"vertical-hp-bar\">\n            <div \n              className=\"vertical-hp-fill\"\n              style={{ height: `${(playerState.hp / INITIAL_PLAYER_HP) * 100}%` }}\n            ></div>\n          </div>\n          <div className=\"field-cards\">\n            {playerField.map(card => (\n              <div key={card.id} className=\"card-container\">\n                <Card card={card} />\n              </div>\n            ))}\n          </div>\n          <div className=\"field-mana-bar\">\n            <div \n              className=\"field-mana-fill\"\n              style={{ width: `${(playerState.mana / MAX_MANA) * 100}%` }}\n            ></div>\n            <span className=\"field-mana-text\">{playerState.mana}/{MAX_MANA}</span>\n            <div className=\"mana-number\">{playerState.mana}</div>\n          </div>\n        </div>\n      </div>\n      <div className=\"player-controls\">\n        <button \n          className=\"ability-button\" \n          onClick={handleAbilityActivation} \n          disabled={abilityCooldown > 0}\n          data-cooldown={abilityCooldown}\n        >\n          {abilityCooldown > 0 ? '' : 'A'}\n        </button>\n      </div>\n      {phase === 'playerSelect' && (\n        <div className=\"player-hand\">\n          {playerHand.map(card => (\n            <div\n              key={card.id}\n              className={`card-container ${playerState.mana < card.manaCost ? 'disabled' : ''}`}\n              onClick={() => handleCardSelect(card, true)}\n            >\n              <Card card={card} />\n            </div>\n          ))}\n        </div>\n      )}\n      {phase === 'bossSelect' && (\n        <div className=\"boss-hand\">\n          {bossHand.map(card => (\n            <div\n              key={card.id}\n              className={`card-container ${bossState.mana < card.manaCost ? 'disabled' : ''}`}\n              onClick={() => handleCardSelect(card, false)}\n            >\n              <Card card={card} />\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default BossBattle;\n","// Define ability configurations and mechanics\nexport const ABILITIES = {\n    PHOENIX_REBIRTH: {\n        name: \"Phoenix Rebirth\",\n        element: \"Fire\",\n        description: \"Revive with 30% HP if defeated with 50% more damage, works only once per battle.\",\n        cooldown: 0,\n        duration: -1, // Permanent until triggered\n        execute: (playerState) => ({\n            ...playerState,\n            hp: Math.floor(playerState.maxHp * 0.3),\n            attackMultiplier: 1.5\n        })\n    },\n\n    TIDAL_SURGE: {\n        name: \"Tidal Surge\",\n        element: \"Water\",\n        description: \"randomly multiple by(2,3) mana gain for 4 turns. cooldown 10 turns.\",\n        cooldown: 10,\n        duration: 4,\n        execute: (playerState) => {\n            const multiplier = Math.random() < 0.5 ? 2 : 3;\n            return {\n                ...playerState,\n                manaMultiplier: multiplier\n            };\n        }\n    },\n\n    STONE_SKIN: {\n        name: \"Stone Skin\",\n        element: \"Earth\",\n        description: \"Gain a shield that absorbs the next 3 attacks. cooldown 10 turns.\",\n        cooldown: 10,\n        duration: -1,\n        execute: (playerState) => ({\n            ...playerState,\n            shield: 3\n        })\n    },\n\n    WIND_WALKER: {\n        name: \"Wind Walker\",\n        element: \"Air\",\n        description: \"Reduce one card mana costs by 1, CoolDown 3 turns.\",\n        cooldown: 3,\n        duration: 0,\n        execute: (playerState, playerHand) => {\n            if (playerHand.length > 0) {\n                const randomIndex = Math.floor(Math.random() * playerHand.length);\n                const updatedHand = [...playerHand];\n                updatedHand[randomIndex] = {\n                    ...updatedHand[randomIndex],\n                    manaCost: Math.max(0, updatedHand[randomIndex].manaCost - 1)\n                };\n                return { hand: updatedHand };\n            }\n            return null;\n        }\n    },\n\n    ASTRAL_PROJECTION: {\n        name: \"Astral Projection\",\n        element: \"Spirit\",\n        description: \"Copy a card from your hand and add it to your hand for the next 3 turns. cooldown 10 turns.\",\n        cooldown: 10,\n        duration: 3,\n        execute: (playerState, playerHand) => {\n            if (playerHand.length > 0) {\n                const randomCard = playerHand[Math.floor(Math.random() * playerHand.length)];\n                const projectedCard = {\n                    ...randomCard,\n                    id: `${randomCard.id}_projected_${Date.now()}`,\n                    isProjection: true\n                };\n                return {\n                    hand: [...playerHand, projectedCard]\n                };\n            }\n            return null;\n        }\n    },\n\n    SHADOW_STEAL: {\n        name: \"Shadow Steal\",\n        element: \"Darkness\",\n        description: \"Copy a random card from your opponent's hand. cooldown 5 turns.\",\n        cooldown: 5,\n        duration: 0,\n        execute: (playerState, playerHand, bossHand) => {\n            if (bossHand.length > 0) {\n                const stolenCard = bossHand[Math.floor(Math.random() * bossHand.length)];\n                const copiedCard = {\n                    ...stolenCard,\n                    id: `${stolenCard.id}_stolen_${Date.now()}`,\n                    isStolen: true\n                };\n                return {\n                    hand: [...playerHand, copiedCard]\n                };\n            }\n            return null;\n        }\n    },\n\n    NATURES_BLESSING: {\n        name: \"Nature's Blessing\",\n        element: \"Life\",\n        description: \"Restore 20% HP and Double defense for 3 turns. cooldown 10 turns.\",\n        cooldown: 10,\n        duration: 3,\n        execute: (playerState) => ({\n            ...playerState,\n            hp: Math.min(playerState.maxHp, playerState.hp + Math.floor(playerState.maxHp * 0.2)),\n            defenseMultiplier: 2\n        })\n    }\n};\n\nexport const getAbilityByName = (name) => {\n    return Object.values(ABILITIES).find(ability => ability.name === name);\n};\n\nexport const executeAbility = (ability, playerState, playerHand = [], bossHand = []) => {\n  switch (ability.name) {\n    case \"Phoenix Rebirth\":\n      if (playerState.hp === 0) {\n        return {\n          ...playerState,\n          hp: Math.floor(playerState.maxHp * 0.3),\n          attackMultiplier: 1.5,\n        };\n      }\n      break;\n\n    case \"Tidal Surge\":\n      const multiplier = Math.random() < 0.5 ? 2 : 3;\n      return {\n        ...playerState,\n        manaMultiplier: multiplier,\n      };\n\n    case \"Stone Skin\":\n      return {\n        ...playerState,\n        shield: 3,\n      };\n\n    case \"Wind Walker\":\n      if (playerHand.length > 0) {\n        const randomIndex = Math.floor(Math.random() * playerHand.length);\n        const updatedHand = [...playerHand];\n        updatedHand[randomIndex] = {\n          ...updatedHand[randomIndex],\n          manaCost: Math.max(0, updatedHand[randomIndex].manaCost - 1),\n        };\n        return { hand: updatedHand };\n      }\n      break;\n\n    case \"Astral Projection\":\n      if (playerHand.length > 0) {\n        const randomCard = playerHand[Math.floor(Math.random() * playerHand.length)];\n        const projectedCard = {\n          ...randomCard,\n          id: `${randomCard.id}_projected_${Date.now()}`,\n          isProjection: true,\n        };\n        return {\n          hand: [...playerHand, projectedCard],\n        };\n      }\n      break;\n\n    case \"Shadow Steal\":\n      if (bossHand.length > 0) {\n        const stolenCard = bossHand[Math.floor(Math.random() * bossHand.length)];\n        const copiedCard = {\n          ...stolenCard,\n          id: `${stolenCard.id}_stolen_${Date.now()}`,\n          isStolen: true,\n        };\n        return {\n          hand: [...playerHand, copiedCard],\n        };\n      }\n      break;\n\n    case \"Nature's Blessing\":\n      return {\n        ...playerState,\n        hp: Math.min(playerState.maxHp, playerState.hp + Math.floor(playerState.maxHp * 0.2)),\n        defenseMultiplier: 2,\n      };\n\n    default:\n      return playerState;\n  }\n};\n"],"names":["INITIAL_PLAYER_HP","INITIAL_BOSS_HP","MAX_MANA","shuffleArray","array","i","length","j","Math","floor","random","getElementClass","bossElement","toLowerCase","createDamageNumber","damage","x","y","element","document","createElement","className","textContent","style","left","top","body","appendChild","setTimeout","remove","_ref","boss","playerAbility","playerDeck","useSelector","state","player","deck","playerHand","setPlayerHand","useState","playerField","setPlayerField","bossDeck","setBossDeck","bossHand","setBossHand","bossField","setBossField","phase","setPhase","round","setRound","playerState","setPlayerState","hp","mana","characterState","emote","bossState","setBossState","abilityCooldown","setAbilityCooldown","useEffect","shuffledPlayerDeck","slice","getDeck","name","shuffledBossDeck","handleCardSelect","card","isPlayer","manaCost","prev","filter","c","id","checkForEndOfRound","winner","alert","min","max","_jsxs","children","_jsx","onClick","endPlayerTurn","endBossTurn","calculateResults","playerDamage","bossDamage","updatedBossField","map","defenseCard","sort","a","b","defensePower","forEach","type","cardElement","querySelector","classList","add","rect","getBoundingClientRect","attackPower","right","remainingAttackPower","defenseElement","block","updatedPlayerField","bossFieldElement","playerFieldElement","querySelectorAll","width","src","fireImpImage","alt","height","Card","playerImage","handleAbilityActivation","updatedState","ability","arguments","undefined","maxHp","attackMultiplier","multiplier","manaMultiplier","shield","randomIndex","updatedHand","hand","randomCard","projectedCard","Date","now","isProjection","stolenCard","copiedCard","isStolen","defenseMultiplier","executeAbility","cooldown","disabled"],"sourceRoot":""}